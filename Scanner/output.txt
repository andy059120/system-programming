1 PREP 1 IDEN include
1 OPER <
1 OPER >
1 IDEN stdio.h
2 SC //2 OPER /
2 SC //2 OPER /
2 PREP 2 IDEN include
2 OPER <
2 OPER >
2 IDEN stdlib.h
3 PREP 3 IDEN include
3 OPER <
3 OPER >
3 IDEN string.h
/
/
5 PREP 5 IDEN define
5 IDEN REWD_MAX_L
5 IDEN N
6 INTE 10
7 REWD const
7 REWD char
7 OPER [
7 IDEN rewds
7 OPER ]
7 OPER [
7 INTE 10
7 SPEC {
/
/
8 INTE 31
8 REWD if
8 OPER ,
8 REWD do
8 OPER ,
8 REWD for
8 OPER ,
8 REWD int
8 OPER ,
8 REWD break
8 OPER ,
8 REWD default
8 OPER ,
8 REWD float
8 OPER ,
9 REWD double
9 OPER ,
9 REWD case
9 OPER ,
9 REWD else
9 OPER ,
9 REWD extern
9 OPER ,
9 REWD sizeof
9 OPER ,
9 REWD register
9 OPER ,
10 REWD while
10 OPER ,
10 REWD enum
10 OPER ,
10 REWD union
10 OPER ,
10 REWD goto
10 OPER ,
10 REWD auto
10 OPER ,
10 REWD char
10 OPER ,
10 REWD const
10 OPER ,
11 REWD static
11 OPER ,
11 REWD switch
11 OPER ,
11 REWD continue
11 OPER ,
11 REWD struct
11 OPER ,
11 REWD return
11 OPER ,
11 REWD long
11 OPER ,
12 REWD short
12 OPER ,
12 REWD signed
12 OPER ,
12 REWD unsigned
12 OPER ,
12 REWD typedef
12 OPER ,
12 REWD void
12 SPEC }
12 SPEC ;
14 REWD void
14 SPEC (
14 IDEN start
14 IDEN FILE
14 OPER *
14 OPER ,
14 IDEN fin
14 IDEN FILE
14 OPER *
14 SPEC )
14 IDEN fout
15 SPEC {
16 REWD int
16 IDEN SLOC
16 OPER =
16 SPEC ;
16 INTE 1
17 REWD int
17 IDEN index
17 OPER =
17 SPEC ;
17 INTE 0
18 REWD int
18 IDEN i
18 OPER =
18 SPEC ;
18 INTE 0
19 REWD char
19 SPEC ;
19 IDEN c
20 REWD char
20 OPER [
20 IDEN buffer
20 INTE 255
20 SPEC ;
21 REWD char
21 OPER [
21 IDEN token
21 INTE 10
21 SPEC ;
/
/
22 REWD while
22 SPEC (
22 SPEC (
22 IDEN c
22 OPER =
22 SPEC (
22 IDEN getc
22 SPEC )
22 IDEN fin
22 SPEC )
22 OPER !
22 OPER =
22 SPEC )
22 IDEN EOF
23 REWD int
23 IDEN flagIDEN
23 OPER =
23 SPEC ;
23 INTE 0
24 REWD int
24 IDEN flagREWD
24 OPER =
24 SPEC ;
24 INTE 0
25 REWD int
25 IDEN flagINTE
25 OPER =
25 SPEC ;
25 INTE 0
26 REWD int
26 IDEN flagFLOT
26 OPER =
26 SPEC ;
26 INTE 0
27 REWD int
27 IDEN flagSC
27 OPER =
27 SPEC ;
27 INTE 0
28 REWD int
28 IDEN flagPREP
28 OPER =
28 SPEC ;
28 INTE 0
30 REWD while
30 SPEC (
30 SPEC (
30 IDEN fscanf
30 OPER ,
30 IDEN fin
30 OPER %
30 IDEN c
30 OPER ,
30 OPER &
30 OPER [
30 IDEN buffer
30 OPER ]
30 IDEN index
30 SPEC )
30 OPER !
30 OPER =
30 SPEC )
30 IDEN EOF
31 SPEC {
/
/
33 IDEN PREP
33 REWD if
33 SPEC (
33 OPER [
33 IDEN buffer
33 OPER ]
33 IDEN index
33 OPER =
33 OPER =
33 SPEC )
33 INTE 35
34 SPEC {
35 IDEN flagPREP
35 OPER =
35 SPEC ;
35 INTE 1
36 REWD if
36 SPEC (
36 IDEN flagPREP
36 OPER =
36 OPER =
36 SPEC )
36 INTE 1
37 SPEC {
38 SPEC (
38 IDEN fprintf
38 OPER ,
38 IDEN fout
38 OPER %
38 IDEN d
38 OPER ,
38 SPEC )
38 IDEN SLOC
38 SPEC ;
39 SPEC (
39 IDEN fprintf
39 OPER ,
39 IDEN fout
39 OPER %
39 IDEN s
39 OPER ,
39 IDEN PREP
39 SPEC )
39 SPEC ;
40 SPEC ;
40 INTE flagSC++
41 SPEC }
42 REWD else
42 REWD if
42 SPEC (
42 IDEN flagSC
42 OPER >
42 SPEC )
42 INTE 1
43 SPEC {
44 SPEC (
44 IDEN fprintf
44 OPER ,
44 IDEN fout
44 OPER %
44 IDEN s
44 OPER ,
44 SPEC )
44 IDEN buffer
44 SPEC ;
45 SPEC (
45 IDEN fprintf
45 OPER ,
45 IDEN fout
45 OPER %
45 IDEN c
45 OPER ,
45 IDEN n
45 SPEC )
45 SPEC ;
46 IDEN flagPREP
46 OPER =
46 SPEC ;
46 INTE 0
47 SPEC ;
47 REWD continue
48 SPEC }
49 SPEC }
/
/
51 IDEN SC
51 REWD if
51 SPEC (
51 OPER [
51 IDEN buffer
51 OPER ]
51 IDEN index
51 OPER =
51 OPER =
51 SPEC )
51 INTE 47
52 SPEC {
53 REWD if
53 SPEC (
53 IDEN flagSC
53 OPER =
53 OPER =
53 SPEC )
53 INTE 1
54 SPEC {
55 SPEC (
55 IDEN fprintf
55 OPER ,
55 IDEN fout
55 OPER %
55 IDEN d
55 OPER ,
55 SPEC )
55 IDEN SLOC
55 SPEC ;
56 SPEC (
56 IDEN fprintf
56 OPER ,
56 IDEN fout
56 OPER %
56 IDEN s
56 OPER ,
56 IDEN SC
56 SPEC )
56 SPEC ;
57 SPEC (
57 IDEN fprintf
57 OPER ,
57 IDEN fout
57 OPER %
57 IDEN s
57 OPER ,
/
/
57 SPEC )
57 SPEC ;
58 SPEC ;
58 INTE flagSC++
59 SPEC }
60 REWD else
60 REWD if
60 SPEC (
60 IDEN flagSC
60 OPER >
60 SPEC )
60 INTE 1
61 SPEC {
62 SPEC (
62 IDEN fprintf
62 OPER ,
62 IDEN fout
62 OPER %
62 IDEN c
62 OPER ,
62 OPER [
62 IDEN buffer
62 OPER ]
62 IDEN index
62 SPEC )
62 SPEC ;
63 SPEC (
63 IDEN fprintf
63 OPER ,
63 IDEN fout
63 OPER %
63 IDEN c
63 OPER ,
63 IDEN n
63 SPEC )
63 SPEC ;
/
/
64 IDEN flagSC
64 OPER =
64 SPEC ;
64 INTE 0
65 SPEC ;
65 REWD continue
66 SPEC }
68 REWD else
68 SPEC {
69 IDEN flagSC
69 OPER =
69 SPEC ;
69 INTE 0
70 SPEC }
71 IDEN flagSC
71 OPER =
71 SPEC ;
71 INTE 1
72 SPEC }
/
/
74 IDEN SPEC
74 REWD if
74 SPEC (
74 OPER [
74 IDEN buffer
74 OPER ]
74 IDEN index
74 OPER =
74 OPER =
74 INTE 123
74 OPER [
74 IDEN buffer
74 OPER ]
74 IDEN index
74 OPER =
74 OPER =
74 INTE 125
74 OPER [
74 IDEN buffer
74 OPER ]
74 IDEN index
74 OPER =
74 OPER =
74 INTE 40
74 OPER [
74 IDEN buffer
74 OPER ]
74 IDEN index
74 OPER =
74 OPER =
74 INTE 41
74 OPER [
74 IDEN buffer
74 OPER ]
74 IDEN index
74 OPER =
74 OPER =
74 INTE 58
74 OPER [
74 IDEN buffer
74 OPER ]
74 IDEN index
74 OPER =
74 OPER =
74 INTE 59
74 OPER [
74 IDEN buffer
74 OPER ]
74 IDEN index
74 OPER =
74 OPER =
74 SPEC )
74 INTE 63
75 SPEC {
76 SPEC (
76 IDEN fprintf
76 OPER ,
76 IDEN fout
76 OPER %
76 IDEN d
76 OPER ,
76 SPEC )
76 IDEN SLOC
76 SPEC ;
77 SPEC (
77 IDEN fprintf
77 OPER ,
77 IDEN fout
77 OPER %
77 IDEN s
77 OPER ,
77 IDEN SPEC
77 SPEC )
77 SPEC ;
78 SPEC (
78 IDEN fprintf
78 OPER ,
78 IDEN fout
78 OPER %
78 IDEN c
78 OPER ,
78 OPER [
78 IDEN buffer
78 OPER ]
78 IDEN index
78 SPEC )
78 SPEC ;
79 SPEC (
79 IDEN fprintf
79 OPER ,
79 IDEN fout
79 OPER %
79 IDEN c
79 OPER ,
79 IDEN n
79 SPEC )
79 SPEC ;
80 SPEC }
82 REWD if
82 SPEC (
82 OPER [
82 IDEN buffer
82 OPER ]
82 IDEN index
82 OPER =
82 OPER =
82 IDEN n
82 SPEC )
83 SPEC {
84 SPEC ;
84 INTE SLOC++
85 SPEC }
/
/
86 SPEC ;
86 INTE i++
/
/
87 IDEN i
87 OPER %
87 OPER =
87 SPEC ;
87 INTE 10
/
/
88 SPEC ;
88 FLOT index++
89 IDEN index
89 OPER %
89 OPER =
89 SPEC ;
89 INTE 255
/
/
91 IDEN IDEN
91 OPER &
92 IDEN REWD
93 REWD if
93 SPEC (
93 SPEC (
93 OPER [
93 IDEN buffer
93 OPER ]
93 IDEN index
93 OPER =
93 OPER =
93 INTE 95
93 OPER [
93 IDEN buffer
93 OPER ]
93 IDEN index
93 OPER >
93 OPER =
93 INTE 65
93 OPER [
93 IDEN buffer
93 OPER ]
93 IDEN index
93 OPER <
93 OPER =
93 INTE 90
93 OPER [
93 IDEN buffer
93 OPER ]
93 IDEN index
93 OPER >
93 OPER =
93 INTE 97
93 OPER [
93 IDEN buffer
93 OPER ]
93 IDEN index
93 OPER <
93 OPER =
93 SPEC )
93 INTE 122
93 IDEN i
93 OPER <
93 SPEC )
93 INTE 10
/
/
94 REWD if
94 SPEC (
94 SPEC (
94 OPER [
94 IDEN buffer
94 OPER ]
94 IDEN index
94 OPER >
94 OPER =
94 INTE 97
94 OPER [
94 IDEN buffer
94 OPER ]
94 IDEN index
94 OPER <
94 OPER =
94 SPEC )
94 INTE 122
94 IDEN i
94 OPER <
94 SPEC )
94 INTE 10
95 SPEC {
96 REWD if
96 SPEC (
96 IDEN i
96 OPER =
96 OPER =
96 SPEC )
96 INTE 0
97 SPEC {
98 REWD if
98 SPEC (
98 OPER [
98 IDEN buffer
98 OPER ]
98 IDEN index
98 OPER >
98 OPER =
98 INTE 48
98 OPER [
98 IDEN buffer
98 OPER ]
98 IDEN index
98 OPER <
98 OPER =
98 SPEC )
98 INTE 57
99 SPEC {
/
/
100 SPEC ;
100 REWD continue
101 SPEC }
102 SPEC }
103 REWD if
103 SPEC (
103 SPEC (
103 OPER [
103 IDEN buffer
103 OPER ]
103 IDEN index
103 OPER =
103 OPER =
103 INTE 69
103 OPER [
103 IDEN buffer
103 OPER ]
103 IDEN index
103 OPER =
103 OPER =
103 SPEC )
103 INTE 101
103 SPEC )
103 IDEN flagFLOT
104 SPEC {
105 OPER [
105 IDEN token
105 OPER ]
105 IDEN i
105 OPER =
105 OPER [
105 IDEN buffer
105 OPER ]
105 IDEN index
105 SPEC ;
106 SPEC ;
106 INTE i++
107 IDEN flagINTE
107 OPER =
107 SPEC ;
107 INTE 1
108 IDEN flagFLOT
108 OPER =
108 SPEC ;
108 INTE 1
109 IDEN flagIDEN
109 OPER =
109 SPEC ;
109 INTE 0
110 IDEN flagREWD
110 OPER =
110 SPEC ;
110 INTE 0
111 SPEC ;
111 REWD continue
112 SPEC }
113 OPER [
113 IDEN token
113 OPER ]
113 IDEN i
113 OPER =
113 OPER [
113 IDEN buffer
113 OPER ]
113 IDEN index
113 SPEC ;
114 SPEC ;
114 INTE i++
115 IDEN flagREWD
115 OPER =
115 SPEC ;
115 INTE 1
116 IDEN flagIDEN
116 OPER =
116 SPEC ;
116 INTE 1
117 IDEN flagINTE
117 OPER =
117 SPEC ;
117 INTE 0
118 IDEN flagFLOT
118 OPER =
118 SPEC ;
118 INTE 0
119 SPEC ;
119 REWD continue
120 SPEC }
/
/
122 IDEN INTE
122 OPER &
123 IDEN FLOT
123 REWD if
123 SPEC (
123 SPEC )
123 IDEN flagFLOT
124 SPEC {
125 REWD if
125 SPEC (
125 SPEC (
125 OPER [
125 IDEN buffer
125 OPER ]
125 IDEN index
125 OPER =
125 OPER =
125 INTE 43
125 OPER [
125 IDEN buffer
125 OPER ]
125 IDEN index
125 OPER =
125 OPER =
125 INTE 45
125 OPER [
125 IDEN buffer
125 OPER ]
125 IDEN index
125 OPER =
125 OPER =
125 INTE 46
125 OPER [
125 IDEN buffer
125 OPER ]
125 IDEN index
125 OPER >
125 OPER =
125 INTE 48
125 OPER [
125 IDEN buffer
125 OPER ]
125 IDEN index
125 OPER <
125 OPER =
125 INTE 57
125 OPER [
125 IDEN buffer
125 OPER ]
125 IDEN index
125 OPER =
125 OPER =
125 INTE 69
125 OPER [
125 IDEN buffer
125 OPER ]
125 IDEN index
125 OPER =
125 OPER =
125 SPEC )
125 INTE 101
125 IDEN i
125 OPER <
125 SPEC )
125 INTE 10
126 SPEC {
127 OPER [
127 IDEN token
127 OPER ]
127 IDEN i
127 OPER =
127 OPER [
127 IDEN buffer
127 OPER ]
127 IDEN index
127 SPEC ;
128 SPEC ;
128 INTE i++
129 IDEN flagINTE
129 OPER =
129 SPEC ;
129 INTE 1
130 IDEN flagFLOT
130 OPER =
130 SPEC ;
130 INTE 1
131 IDEN flagIDEN
131 OPER =
131 SPEC ;
131 INTE 0
132 IDEN flagREWD
132 OPER =
132 SPEC ;
132 INTE 0
133 SPEC ;
133 REWD continue
134 SPEC }
135 SPEC }
137 REWD else
137 SPEC {
138 REWD if
138 SPEC (
138 SPEC (
138 OPER [
138 IDEN buffer
138 OPER ]
138 IDEN index
138 OPER =
138 OPER =
138 INTE 43
138 OPER [
138 IDEN buffer
138 OPER ]
138 IDEN index
138 OPER =
138 OPER =
138 INTE 45
138 OPER [
138 IDEN buffer
138 OPER ]
138 IDEN index
138 OPER =
138 OPER =
138 INTE 46
138 OPER [
138 IDEN buffer
138 OPER ]
138 IDEN index
138 OPER >
138 OPER =
138 INTE 48
138 OPER [
138 IDEN buffer
138 OPER ]
138 IDEN index
138 OPER <
138 OPER =
138 SPEC )
138 INTE 57
138 IDEN i
138 OPER <
138 SPEC )
138 INTE 10
139 SPEC {
140 OPER [
140 IDEN token
140 OPER ]
140 IDEN i
140 OPER =
140 OPER [
140 IDEN buffer
140 OPER ]
140 IDEN index
140 SPEC ;
141 SPEC ;
141 INTE i++
142 IDEN flagINTE
142 OPER =
142 SPEC ;
142 INTE 1
143 IDEN flagFLOT
143 OPER =
143 SPEC ;
143 INTE 1
144 IDEN flagIDEN
144 OPER =
144 SPEC ;
144 INTE 0
145 IDEN flagREWD
145 OPER =
145 SPEC ;
145 INTE 0
146 SPEC ;
146 REWD continue
147 SPEC }
148 SPEC }
150 REWD if
150 SPEC (
150 OPER !
150 SPEC )
150 IDEN flagFLOT
151 SPEC {
/
/
153 IDEN OPER
153 REWD if
153 SPEC (
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER =
153 OPER =
153 INTE 33
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER =
153 OPER =
153 INTE 37
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER =
153 OPER =
153 INTE 38
153 SPEC (
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER >
153 OPER =
153 INTE 42
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER <
153 OPER =
153 SPEC )
153 INTE 47
153 SPEC (
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER >
153 OPER =
153 INTE 60
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER <
153 OPER =
153 SPEC )
153 INTE 62
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER =
153 OPER =
153 INTE 91
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER =
153 OPER =
153 INTE 93
153 OPER [
153 IDEN buffer
153 OPER ]
153 IDEN index
153 OPER =
153 OPER =
153 SPEC )
153 INTE 94
154 SPEC {
155 SPEC (
155 IDEN fprintf
155 OPER ,
155 IDEN fout
155 OPER %
155 IDEN d
155 OPER ,
155 SPEC )
155 IDEN SLOC
155 SPEC ;
156 SPEC (
156 IDEN fprintf
156 OPER ,
156 IDEN fout
156 OPER %
156 IDEN s
156 OPER ,
156 IDEN OPER
156 SPEC )
156 SPEC ;
157 SPEC (
157 IDEN fprintf
157 OPER ,
157 IDEN fout
157 OPER %
157 IDEN c
157 OPER ,
157 OPER [
157 IDEN buffer
157 OPER ]
157 IDEN index
157 SPEC )
157 SPEC ;
158 SPEC (
158 IDEN fprintf
158 OPER ,
158 IDEN fout
158 OPER %
158 IDEN c
158 OPER ,
158 IDEN n
158 SPEC )
158 SPEC ;
159 SPEC }
160 SPEC }
162 REWD if
162 SPEC (
162 SPEC )
162 IDEN flagINTE
163 SPEC {
164 REWD if
164 SPEC (
164 IDEN i
164 OPER =
164 OPER =
164 SPEC )
164 INTE 0
165 SPEC ;
165 REWD continue
166 REWD for
166 SPEC (
166 REWD int
166 IDEN j
166 OPER =
166 SPEC ;
166 IDEN i
166 IDEN j
166 OPER <
166 SPEC ;
166 INTE 10
166 SPEC )
166 INTE j++
167 SPEC {
168 OPER [
168 IDEN token
168 OPER ]
168 IDEN i
168 OPER =
168 INTE 0
168 SPEC ;
169 SPEC }
170 REWD for
170 SPEC (
170 REWD int
170 IDEN j
170 OPER =
170 SPEC ;
170 INTE 0
170 IDEN j
170 OPER <
170 SPEC ;
170 IDEN i
170 SPEC )
170 INTE j++
171 SPEC {
172 REWD if
172 SPEC (
172 OPER [
172 IDEN token
172 OPER ]
172 IDEN j
172 OPER =
172 OPER =
172 INTE 46
172 OPER [
172 IDEN token
172 OPER ]
172 IDEN j
172 OPER =
172 OPER =
172 INTE 69
172 OPER [
172 IDEN token
172 OPER ]
172 IDEN j
172 OPER =
172 OPER =
172 SPEC )
172 INTE 101
173 SPEC {
174 IDEN flagINTE
174 OPER =
174 SPEC ;
174 INTE 0
175 SPEC }
176 SPEC }
177 REWD if
177 SPEC (
177 SPEC )
177 IDEN flagINTE
178 SPEC {
179 SPEC (
179 IDEN fprintf
179 OPER ,
179 IDEN fout
179 OPER %
179 IDEN d
179 OPER ,
179 SPEC )
179 IDEN SLOC
179 SPEC ;
180 SPEC (
180 IDEN fprintf
180 OPER ,
180 IDEN fout
180 OPER %
180 IDEN s
180 OPER ,
180 IDEN INTE
180 SPEC )
180 SPEC ;
181 REWD for
181 SPEC (
181 REWD int
181 IDEN j
181 OPER =
181 SPEC ;
181 INTE 0
181 IDEN j
181 OPER <
181 SPEC ;
181 IDEN i
181 SPEC )
181 INTE j++
182 SPEC {
183 SPEC (
183 IDEN fprintf
183 OPER ,
183 IDEN fout
183 OPER %
183 IDEN c
183 OPER ,
183 OPER [
183 IDEN token
183 OPER ]
183 IDEN j
183 SPEC )
183 SPEC ;
184 SPEC }
185 SPEC (
185 IDEN fprintf
185 OPER ,
185 IDEN fout
185 OPER %
185 IDEN c
185 OPER ,
185 IDEN n
185 SPEC )
185 SPEC ;
186 IDEN flagIDEN
186 OPER =
186 SPEC ;
186 INTE 0
187 IDEN i
187 OPER =
187 SPEC ;
187 INTE 0
188 SPEC ;
188 REWD continue
189 SPEC }
190 SPEC }
191 REWD if
191 SPEC (
191 SPEC )
191 IDEN flagFLOT
192 SPEC {
193 SPEC (
193 IDEN fprintf
193 OPER ,
193 IDEN fout
193 OPER %
193 IDEN d
193 OPER ,
193 SPEC )
193 IDEN SLOC
193 SPEC ;
194 SPEC (
194 IDEN fprintf
194 OPER ,
194 IDEN fout
194 OPER %
194 IDEN s
194 OPER ,
194 IDEN FLOT
194 SPEC )
194 SPEC ;
195 REWD for
195 SPEC (
195 REWD int
195 IDEN j
195 OPER =
195 SPEC ;
195 INTE 0
195 IDEN j
195 OPER <
195 SPEC ;
195 IDEN i
195 SPEC )
195 INTE j++
196 SPEC {
197 SPEC (
197 IDEN fprintf
197 OPER ,
197 IDEN fout
197 OPER %
197 IDEN c
197 OPER ,
197 OPER [
197 IDEN token
197 OPER ]
197 IDEN j
197 SPEC )
197 SPEC ;
198 SPEC }
199 SPEC (
199 IDEN fprintf
199 OPER ,
199 IDEN fout
199 OPER %
199 IDEN c
199 OPER ,
199 IDEN n
199 SPEC )
199 SPEC ;
200 IDEN flagFLOT
200 OPER =
200 SPEC ;
200 INTE 0
201 IDEN i
201 OPER =
201 SPEC ;
201 INTE 0
202 SPEC ;
202 REWD continue
203 SPEC }
204 REWD if
204 SPEC (
204 SPEC )
204 IDEN flagREWD
205 SPEC {
206 REWD for
206 SPEC (
206 REWD int
206 IDEN j
206 OPER =
206 SPEC ;
206 IDEN i
206 IDEN j
206 OPER <
206 SPEC ;
206 INTE 10
206 SPEC )
206 INTE j++
207 SPEC {
208 OPER [
208 IDEN token
208 OPER ]
208 IDEN i
208 OPER =
208 INTE 0
208 SPEC ;
209 SPEC }
/
/
210 SPEC (
210 IDEN printf
210 OPER %
210 IDEN s
210 OPER ,
210 SPEC )
210 IDEN token
210 SPEC ;
211 REWD for
211 SPEC (
211 REWD int
211 IDEN j
211 OPER =
211 SPEC ;
211 INTE 0
211 IDEN j
211 OPER <
211 SPEC ;
211 INTE 31
211 SPEC )
211 INTE j++
212 SPEC {
213 REWD if
213 SPEC (
213 SPEC (
213 IDEN strcmp
213 OPER ,
213 IDEN token
213 OPER [
213 IDEN rewds
213 OPER ]
213 IDEN j
213 SPEC )
213 OPER =
213 OPER =
213 SPEC )
213 INTE 0
214 SPEC {
215 SPEC (
215 IDEN fprintf
215 OPER ,
215 IDEN fout
215 OPER %
215 IDEN d
215 OPER ,
215 SPEC )
215 IDEN SLOC
215 SPEC ;
216 SPEC (
216 IDEN fprintf
216 OPER ,
216 IDEN fout
216 OPER %
216 IDEN s
216 OPER ,
216 IDEN REWD
216 SPEC )
216 SPEC ;
217 SPEC (
217 IDEN fprintf
217 OPER ,
217 IDEN fout
217 OPER %
217 IDEN s
217 OPER ,
217 SPEC )
217 IDEN token
217 SPEC ;
218 SPEC (
218 IDEN fprintf
218 OPER ,
218 IDEN fout
218 OPER %
218 IDEN c
218 OPER ,
218 IDEN n
218 SPEC )
218 SPEC ;
219 IDEN i
219 OPER =
219 SPEC ;
219 INTE 0
220 IDEN flagREWD
220 OPER =
220 SPEC ;
220 INTE 0
221 SPEC ;
221 REWD continue
/
/
222 IDEN flagIDEN
222 OPER =
222 SPEC ;
222 INTE 0
223 SPEC }
224 SPEC }
225 IDEN flagREWD
225 OPER =
225 SPEC ;
225 INTE 0
226 SPEC }
227 REWD if
227 SPEC (
227 SPEC )
227 IDEN flagIDEN
228 SPEC {
229 REWD if
229 SPEC (
229 IDEN i
229 OPER =
229 OPER =
229 SPEC )
229 INTE 0
230 SPEC ;
230 REWD continue
232 SPEC (
232 IDEN fprintf
232 OPER ,
232 IDEN fout
232 OPER %
232 IDEN d
232 OPER ,
232 SPEC )
232 IDEN SLOC
232 SPEC ;
233 SPEC (
233 IDEN fprintf
233 OPER ,
233 IDEN fout
233 OPER %
233 IDEN s
233 OPER ,
233 IDEN IDEN
233 SPEC )
233 SPEC ;
234 REWD for
234 SPEC (
234 REWD int
234 IDEN j
234 OPER =
234 SPEC ;
234 INTE 0
234 IDEN j
234 OPER <
234 SPEC ;
234 IDEN i
234 SPEC )
234 INTE j++
235 SPEC {
236 SPEC (
236 IDEN fprintf
236 OPER ,
236 IDEN fout
236 OPER %
236 IDEN c
236 OPER ,
236 OPER [
236 IDEN token
236 OPER ]
236 IDEN j
236 SPEC )
236 SPEC ;
237 SPEC }
238 SPEC (
238 IDEN fprintf
238 OPER ,
238 IDEN fout
238 OPER %
238 IDEN c
238 OPER ,
238 IDEN n
238 SPEC )
238 SPEC ;
239 IDEN flagIDEN
239 OPER =
239 SPEC ;
239 INTE 0
240 IDEN i
240 OPER =
240 SPEC ;
240 INTE 0
241 SPEC }
/
/
242 SPEC (
242 IDEN printf
242 OPER %
242 IDEN c
242 OPER ,
242 OPER [
242 IDEN buffer
242 OPER ]
242 IDEN index
242 SPEC )
242 SPEC ;
243 SPEC }
244 SPEC }
246 REWD int
246 SPEC (
246 IDEN main
246 SPEC )
247 SPEC {
248 IDEN FILE
248 OPER *
248 IDEN inputFile
248 OPER =
248 SPEC (
248 IDEN fopen
248 IDEN 123.txt
248 OPER ,
248 IDEN r
248 SPEC )
248 SPEC ;
249 IDEN FILE
249 OPER *
249 IDEN outputFile
249 OPER =
249 SPEC (
249 IDEN fopen
249 IDEN output.txt
249 OPER ,
249 IDEN w
249 SPEC )
249 SPEC ;
250 REWD if
250 SPEC (
250 IDEN inputFile
250 OPER =
250 OPER =
250 SPEC )
250 IDEN NULL
251 SPEC {
252 SPEC (
252 IDEN printf
252 IDEN failed
252 IDEN to
252 IDEN open
252 IDEN the
252 FLOT file.
252 IDEN n
252 SPEC )
252 SPEC ;
253 REWD return
253 SPEC ;
253 INTE 1
/
/
253 IDEN EXIT_FAILU
254 IDEN E
254 SPEC }
256 SPEC (
256 IDEN start
256 OPER ,
256 IDEN inputFile
256 SPEC )
256 IDEN outputFile
256 SPEC ;
/
/
258 SPEC (
258 IDEN fprintf
258 OPER ,
258 IDEN pFile
258 OPER %
258 IDEN d
258 OPER ,
258 OPER [
258 IDEN space
258 OPER ]
258 IDEN 252+i
258 SPEC )
258 SPEC ;
259 SPEC (
259 IDEN fclose
259 SPEC )
259 IDEN inputFile
259 SPEC ;
260 SPEC (
260 IDEN fclose
260 SPEC )
260 IDEN outputFile
260 SPEC ;
262 REWD return
262 SPEC ;
262 INTE 0
263 SPEC }
